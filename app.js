const express = require("express")
const bodyParser = require("body-parser");
const path = require("path");
const mysql = require('mysql2'); 
const { authenticateUser } = require(__dirname + "/db_query/auth.js");
const { getBooks } = require(__dirname + "/db_query/books.js"); 
const db = require(__dirname + "/db_query/db.js"); 
const pool = require(__dirname + "/db_query/pool.js"); 
const app = express();
const bcrypt = require("bcryptjs"); 
const { getAuthorByBook } = require(__dirname + "/db_query/author.js");
const { getBookSeriesByAuthor } = require(__dirname + "/db_query/book_series.js");
const session = require('express-session');
const multer = require('multer');
const upload = multer();
require('dotenv').config();
const PORT = process.env.PORT || 3000;
// Middleware
app.use(session({
    secret: 'mysecretkey',
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: false, // ƒê·∫∑t th√†nh true n·∫øu d√πng HTTPS
        httpOnly: true, 
        maxAge: 24 * 60 * 60 * 1000,
        sameSite: 'lax'
    }
}));
app.use((req, res, next) => {
    console.log('Session data:', req.session); // Log session m·ªói request
    next();
});
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, "static")));
app.use(express.json());
function checkAuth(req, res, next) {
    if (!req.session.user_id) {
        console.log('Unauthorized access - No session user_id'); // Debug
        return res.status(401).json({ success: false, message: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p." });
    }
    next();
}
// Trang login
app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "login.html"));
});
app.get("/api/session", (req, res) => {
    res.json({
        user_id: req.session.user_id || null,
    });
});
// Route ƒë·ªÉ l·∫•y d·ªØ li·ªáu s√°ch
app.get("/books", (req, res) => {
    getBooks((err, books) => {
        if (err) {
            res.status(500).json({ error: "L·ªói khi l·∫•y d·ªØ li·ªáu s√°ch" });
        } else {
            res.json(books);
        }
    });
});

// Trang ch√≠nh
app.get("/index.html",checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "index.html"));
    
});
// API tr·∫£ v·ªÅ JSON
app.get("/book/:id", checkAuth, async (req, res) => {
    console.log("Route /book/:id ƒë∆∞·ª£c g·ªçi v·ªõi ID:", req.params.id);

    const bookId = req.params.id;
    const query = "CALL GetBookById(?)";

    try {
        const [results] = await db.execute(query, [bookId]);

        // K·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ th·ªß t·ª•c s·∫Ω n·∫±m trong m·∫£ng [0]
        if (results[0].length > 0) {
            return res.json(results[0][0]);
        } else {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√°c gi·∫£" });
        }
    } catch (err) {
        console.error("L·ªói khi g·ªçi th·ªß t·ª•c:", err);
        return res.status(500).json({ error: "L·ªói khi truy v·∫•n d·ªØ li·ªáu t√°c gi·∫£" });
    }
});

// Route hi·ªÉn th·ªã file HTML
app.get("/book-detail.html",checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "book-detail.html"));
});
// T√°c gi·∫£
app.get("/author.html",checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "author.html"));
});

app.get("/author/:id", checkAuth, async (req, res) => {
    const authorId = req.params.id;
    const query = "Call GetAuthor(?)";

    try {
        // S·ª≠ d·ª•ng db.execute() ho·∫∑c db.query() v·ªõi promise
        const [results] = await db.execute(query, [authorId]);
        const data = results[0];

        if (data.length > 0) {
            return res.json(data[0]); // ‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu t√°c gi·∫£ ƒë√∫ng
        } else {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√°c gi·∫£" });
        }
    } catch (err) {
        return res.status(500).json({ error: "L·ªói khi truy v·∫•n d·ªØ li·ªáu t√°c gi·∫£" });
    }
});
app.get("/check-author", async (req, res) => {
    const { name } = req.query;
    const query = "CALL SearchAuthorBeLike(?)";

    try {
        const [rows] = await db.execute(query, [name]);
        res.json(rows[0]); // rows[0] ch·ª©a d·ªØ li·ªáu ch√≠nh
    } catch (err) {
        console.error("L·ªói khi g·ªçi th·ªß t·ª•c SearchAuthorByName:", err);
        res.status(500).json({ error: "L·ªói khi truy v·∫•n t√°c gi·∫£" });
    }
});
// Ch·ªß ƒë·ªÅ 
app.get("/subject.html",checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "subject.html"));
});
app.get("/subject/:id",checkAuth, async(req, res) => {
    const subjectId = req.params.id;

    const query = "Call GetSubject (?)"; 

    try {
        // S·ª≠ d·ª•ng db.execute() ho·∫∑c db.query() v·ªõi promise
        const [results] = await db.execute(query, [subjectId]);
        const data = results[0];

        if (data.length > 0) {
            return res.json(data[0]); // ‚úÖ Tr·∫£ v·ªÅ d·ªØ li·ªáu t√°c gi·∫£ ƒë√∫ng
        } else {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√°c gi·∫£" });
        }
    } catch (err) {
        return res.status(500).json({ error: "L·ªói khi truy v·∫•n d·ªØ li·ªáu t√°c gi·∫£" });
    }
});
app.get("/check-subject", async (req, res) => {
    const {name} = req.query;
    const [rows] = await db.query('Call SearchSubjectBeLike(?)', name);
    res.json(rows[0]);
})
// Nh√† xu·∫•t b·∫£n
app.get("/book_publisher.html",checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "book_publisher.html"));
});
////// Code m·∫´u g·ªçi th·ªß t·ª•c h√†m//////
app.get("/book_publisher/:id", checkAuth, async (req, res) => {
    const publisherId = req.params.id;

    try {
        const [results] = await db.query("CALL GetPublisherById(?)", [publisherId]);

        if (results[0].length > 0) {
            return res.json(results[0][0]); // ‚úÖ Tr·∫£ v·ªÅ 1 record
        } else {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y nh√† xu·∫•t b·∫£n" });
        }
    } catch (err) {
        console.error(err);
        return res.status(500).json({ error: "L·ªói khi g·ªçi stored procedure" });
    }
});
app.get('/check-publisher', async (req, res) => {
    const { name } = req.query;
    const [rows] = await db.query('Call SearchBookPublisherBeLike (?)', name);
    res.json(rows[0]);
  });
// Series
app.get("/book-series/:bookSeriesId",checkAuth, (req, res) => {
    const bookSeriesId = req.params.bookSeriesId;
    console.log("üìå bookSeriesId nh·∫≠n ƒë∆∞·ª£c:", bookSeriesId); // Ki·ªÉm tra ID

    getBookSeriesByAuthor(bookSeriesId, (err, bookSeries) => {
        if (err) {
            console.error("‚ùå L·ªói truy v·∫•n:", err);
            return res.status(500).json({ error: "L·ªói l·∫•y lo·∫°t s√°ch" });
        }
        console.log("‚úÖ D·ªØ li·ªáu tr·∫£ v·ªÅ:", bookSeries);
        res.json({ book_series: bookSeries });
    });
});
app.get("/book-series-detail/:id", checkAuth, async (req, res) => {
    const authorId = req.params.id;

    try {
        const [results] = await db.query("CALL GetBookSeriesDetail(?)", [authorId]);

        if (results[0].length > 0) {
            return res.json(results[0][0]);
        } else {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y t√°c gi·∫£" });
        }
    } catch (err) {
        console.error(err);
        return res.status(500).json({ error: "L·ªói khi g·ªçi th·ªß t·ª•c trong database" });
    }
});
app.get("/book_series.html",checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "book_series.html"));
});
// Ph·∫ßn login user, va phan biet userType
app.post('/login', (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ success: false, message: "Email v√† m·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
    }

    pool.getConnection((err, connection) => {
        if (err) {
            console.error("L·ªói k·∫øt n·ªëi database:", err);
            return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
        }

        const query = `
            SELECT role, User_ID AS id, Full_Name AS name, Email, Sinh_vien, Giao_vien, Password 
            FROM user WHERE Email = ?
            UNION
            SELECT role, EmployeeID AS id, Full_Name AS name, Email, Null as Sinh_vien, Null as Giao_vien, Password 
            FROM employee WHERE Email = ?
        `;

        connection.query(query, [email, email], (err, results) => {
            connection.release();

            if (err) {
                console.error("L·ªói truy v·∫•n:", err);
                return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
            }

            if (results.length === 0) {
                return res.status(404).json({ success: false, message: "Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!" });
            }

            const user = results[0];

            console.log("User retrieved:", user); // Debugging line

            bcrypt.compare(password, user.Password, (err, isMatch) => {
                if (err) {
                    console.error("L·ªói ki·ªÉm tra m·∫≠t kh·∫©u:", err);
                    return res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
                }

                if (!isMatch) {
                    console.log("Password match failed"); // Debugging line
                    return res.status(401).json({ success: false, message: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!" });
                }

                // Thi·∫øt l·∫≠p session cho ng∆∞·ªùi d√πng
                req.session.user_id = user.id;
                req.session.role = user.role;
                req.session.email = user.email;

                // X√°c ƒë·ªãnh n·∫øu l√† Sinh vi√™n hay Gi√°o vi√™n
                let userType;
                if (user.role === 'Admin') {
                    userType = 'admin';
                } else if (user.role === 'Employee') {
                    userType = 'employee';
                } else if (user.Sinh_vien === 1) {
                    userType = 'sinhvien';
                } else if (user.Giao_vien === 1) {
                    userType = 'giaovien';
                } else {
                    userType = 'user'; // fallback n·∫øu kh√¥ng kh·ªõp c√°i n√†o
                }

                req.session.userType = userType;
                req.session.save(err => {
                    if (err) {
                        console.error('L·ªói l∆∞u session:', err);
                        return res.status(500).json({ success: false, message: "L·ªói server" });
                    }
                    res.json({
                        success: true,
                        message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!",
                        role: user.role,
                        userId: user.id,
                        email: user.email,
                        fullName: user.name,
                        userType: userType 
                    });
                });
            });
        });
    });
});

app.get('/user_type', (req, res) => {
    const userType = req.session.userType; 
    const userId=req.session.user_id ;
    const role=req.session.role;
    res.json({ userType, userId,role });
});
// Kiem tra tinh dach cua email va phone
app.post('/check-unique', (req, res) => {
    const { email, phone } = req.body;

    pool.getConnection((err, connection) => {
        if (err) {
            console.error('Error getting connection:', err.message);
            return res.status(500).json({ success: false, message: 'L·ªói server: ' + err.message });
        }

        // Ki·ªÉm tra email
        connection.query('SELECT * FROM user WHERE Email = ?', [email], (err, emailRows) => {
            if (err) {
                connection.release();
                console.error('Error checking email:', err.message);
                return res.status(500).json({ success: false, message: 'L·ªói server: ' + err.message });
            }

            if (emailRows.length > 0) {
                connection.release();
                return res.json({ success: false, message: 'email_exists' });
            }

            // Ki·ªÉm tra phone
            connection.query('SELECT * FROM user WHERE Phone_number = ?', [phone], (err, phoneRows) => {
                if (err) {
                    connection.release();
                    console.error('Error checking phone:', err.message);
                    return res.status(500).json({ success: false, message: 'L·ªói server: ' + err.message });
                }

                if (phoneRows.length > 0) {
                    connection.release();
                    return res.json({ success: false, message: 'phone_exists' });
                }

                connection.release();
                res.json({ success: true });
            });
        });
    });
});

// API ƒë·ªÉ x·ª≠ l√Ω ƒëƒÉng k√Ω
const nodemailer = require('nodemailer');

app.post('/register', (req, res) => {
    const { userID, fullName, email, password, phone, sinhvien, giaovien } = req.body;
    console.log(req.body);

    if (!password) {
        return res.status(400).json({ success: false, message: "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!" });
    }

    pool.getConnection((err, connection) => {
        if (err) {
            console.error("Error getting connection:", err.message);
            return res.status(500).json({ success: false, message: "L·ªói server: " + err.message });
        }

        // Ki·ªÉm tra User_ID ƒë√£ t·ªìn t·∫°i ch∆∞a
        connection.query('SELECT * FROM user WHERE User_ID = ?', [userID], (err, userIdRows) => {
            if (err) {
                connection.release();
                console.error("Error checking UserID:", err.message);
                return res.status(500).json({ success: false, message: "L·ªói server: " + err.message });
            }

            if (userIdRows.length > 0) {
                connection.release();
                return res.json({ success: false, message: "MSSV/MSGV ƒë√£ t·ªìn t·∫°i!" });
            }

            if (sinhvien === 1 && giaovien === 1) {
                connection.release();
                return res.json({ success: false, message: "Ch·ªâ ƒë∆∞·ª£c ch·ªçn m·ªôt vai tr√≤: Sinh vi√™n ho·∫∑c Gi√°o vi√™n!" });
            }
            if (sinhvien === 0 && giaovien === 0) {
                connection.release();
                return res.json({ success: false, message: "Ph·∫£i ch·ªçn m·ªôt vai tr√≤: Sinh vi√™n ho·∫∑c Gi√°o vi√™n!" });
            }

            // M√£ h√≥a password
            const saltRounds = 10;
            bcrypt.hash(password, saltRounds, (err, hashedPassword) => {
                if (err || !hashedPassword) {
                    connection.release();
                    console.error("L·ªói khi m√£ h√≥a m·∫≠t kh·∫©u:", err ? err.message : "M·∫≠t kh·∫©u kh√¥ng h·ª£p l·ªá");
                    return res.status(500).json({ success: false, message: "L·ªói khi m√£ h√≥a m·∫≠t kh·∫©u!" });
                }

                // G·ªçi procedure ƒë·ªÉ t·∫°o t√†i kho·∫£n cho h·ªá th·ªëng ·ª©ng d·ª•ng
                const createAppUserQuery = `CALL CreateUserAccount(?, ?, ?, ?, ?, ?, ?)`;
                const appUserParams = [userID, fullName, email, hashedPassword, phone, sinhvien, giaovien];

                connection.query(createAppUserQuery, appUserParams, (err, result) => {
                    if (err) {
                        connection.release();
                        console.error("L·ªói khi th·ª±c thi procedure t·∫°o t√†i kho·∫£n ·ª©ng d·ª•ng:", err.message);
                        return res.status(500).json({ success: false, message: "ƒêƒÉng k√Ω th·∫•t b·∫°i!" });
                    }

                    // G·ªçi procedure ƒë·ªÉ t·∫°o t√†i kho·∫£n MySQL (v·ªõi m·∫≠t kh·∫©u g·ªëc)
                    const createMySQLUserQuery = `CALL CreateMySQLUserAccount(?, ?)`;
                    const mysqlUserParams = [userID, password];

                    connection.query(createMySQLUserQuery, mysqlUserParams, (err, result) => {
                        connection.release();
                        if (err) {
                            console.error("L·ªói khi th·ª±c thi procedure t·∫°o t√†i kho·∫£n MySQL:", err.message);
                            return res.status(500).json({ success: false, message: "ƒêƒÉng k√Ω th·∫•t b·∫°i!" });
                        }

                        // Sau khi ƒëƒÉng k√Ω th√†nh c√¥ng, g·ª≠i email
                        const transporter = nodemailer.createTransport({
                            service: 'gmail', // S·ª≠ d·ª•ng d·ªãch v·ª• Gmail
                            auth: {
                                user: process.env.EMAIL_USER,  // S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng cho email
                                pass: process.env.EMAIL_PASS   // S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng cho m·∫≠t kh·∫©u
                            }
                        });

                        const mailOptions = {
                            from: process.env.EMAIL_USER, // ƒê·ªãa ch·ªâ email g·ª≠i
                            to: email,                    // ƒê·ªãa ch·ªâ email ng∆∞·ªùi d√πng ƒëƒÉng k√Ω
                            subject: 'H∆∞·ªõng d·∫´n k·∫øt n·ªëi v·ªõi t√†i kho·∫£n MySQL',
                            text: `Ch√†o ${fullName},\n\n` +
                                  `Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng!\n\n` +
                                  `D∆∞·ªõi ƒë√¢y l√† th√¥ng tin t√†i kho·∫£n MySQL c·ªßa b·∫°n:\n` +
                                  `- T√™n ng∆∞·ªùi d√πng MySQL: ${userID}\n` +
                                  `- M·∫≠t kh·∫©u MySQL: ${password}\n\n` +
                                `ƒê·ªÉ k·∫øt n·ªëi v·ªõi MySQL, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c th√¥ng tin tr√™n v·ªõi c√¥ng c·ª• nh∆∞ DBeaver ho·∫∑c MySQL Workbench.\n\n` +
                                `Server Host c·ªßa b·∫°n : yamanote.proxy.rlwy.net.\n\n`+
                                `Port:25297.\n\n`+
                                `T√™n Database:library_management.\n\n`+
                                  `L∆∞u √Ω: H√£y thay ƒë·ªïi m·∫≠t kh·∫©u MySQL sau khi ƒëƒÉng nh·∫≠p l·∫ßn ƒë·∫ßu ƒë·ªÉ b·∫£o m·∫≠t t√†i kho·∫£n.\n\n` +
                                  `Ch√∫c b·∫°n s·ª≠ d·ª•ng h·ªá th·ªëng th√†nh c√¥ng!`
                        };

                        transporter.sendMail(mailOptions, (error, info) => {
                            if (error) {
                                console.error("L·ªói khi g·ª≠i email:", error);
                                return res.status(500).json({ success: false, message: "ƒêƒÉng k√Ω th√†nh c√¥ng, nh∆∞ng kh√¥ng th·ªÉ g·ª≠i email!" });
                            } else {
                                console.log("Email sent: " + info.response);
                                return res.json({ success: true, message: "ƒêƒÉng k√Ω th√†nh c√¥ng, email ƒë√£ ƒë∆∞·ª£c g·ª≠i!" });
                            }
                        });
                    });
                });
            });
        });
    });
});




// L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
app.get("/current-user", checkAuth, async (req, res) => {
    const userId = req.session.user_id;

    if (!userId) {
        return res.status(401).json({ error: "Ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    try {
        const employeeQuery = "CALL GetUserInfo(?)";
        const [empResults] = await db.query(employeeQuery, [userId]);

        if (empResults.length > 0) {
            return res.json(empResults[0]);
        } else {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
}
    } catch (err) {
        console.error("L·ªói khi truy v·∫•n d·ªØ li·ªáu ng∆∞·ªùi d√πng:", err);
        return res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
    }
});

app.get("/login", (req, res) => {
    res.sendFile(__dirname + "/templates/login.html");
});
app.get("/user_profile",checkAuth, (req, res) => {
    if (!req.session.user_id) {
        return res.redirect("/login"); // chuy·ªÉn h∆∞·ªõng n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
    }

    res.sendFile(__dirname + "/templates/user_profile.html");
});
app.put("/update-user", checkAuth, async (req, res) => {
    const { Full_Name, email, Phone_number } = req.body;
    const userId = req.session.user_id;

    if (!userId) {
        return res.status(401).json({ error: "Ch∆∞a ƒëƒÉng nh·∫≠p" });
    }

    const query = `CALL update_user_info(?, ?, ?, ?)`;

    try {
        // G·ªçi th·ªß t·ª•c h√†m ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
        const [result] = await db.query(query, [userId, Full_Name, email, Phone_number]);

        // Ki·ªÉm tra k·∫øt qu·∫£
        if (result.length > 0) {
            return res.json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
        } else {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t" });
        }
    } catch (err) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t:", err);
        return res.status(500).json({ error: "L·ªói m√°y ch·ªß" });
    }
});

// Thay ƒë·ªïi m·∫≠t kh·∫©u
app.put('/change-password', async (req, res) => {
    const userId = req.session.user_id;
    const { current_password, new_password } = req.body;

    if (!userId) {
        return res.status(401).json({ success: false, error: "B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p." });
    }

    if (!current_password || !new_password) {
        return res.status(400).json({ success: false, error: "Thi·∫øu th√¥ng tin." });
    }

    try {
        // L·∫•y hash password t·ª´ DB
        const sqlGet = "SELECT password FROM user WHERE User_ID = ?";
        const [results] = await db.query(sqlGet, [userId]);

        if (results.length === 0) {
            return res.status(404).json({ success: false, error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
        }

        const hashedPassword = results[0].password;

        // So s√°nh password nh·∫≠p v·ªõi hash
        const match = await bcrypt.compare(current_password, hashedPassword);
        if (!match) {
            return res.status(403).json({ success: false, error: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng." });
        }

        // Hash m·∫≠t kh·∫©u m·ªõi
        const newHashedPassword = await bcrypt.hash(new_password, 10);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
        const sqlUpdate = "CALL change_user_password(?, ?)";
        await db.query(sqlUpdate, [userId, newHashedPassword]);

        return res.json({ success: true, message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
    } catch (err) {
        console.error("L·ªói khi x·ª≠ l√Ω y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u:", err);
        return res.status(500).json({ success: false, error: "L·ªói m√°y ch·ªß khi ƒë·ªïi m·∫≠t kh·∫©u." });
    }
});


app.get('/change_password.html',checkAuth, (req, res) => {
    res.sendFile(__dirname + "/templates/change_password.html");
  });
// M∆∞·ª£n s√°ch
app.get('/borrowed-books',checkAuth, async (req, res) => {
    const userId = req.query.user_id;
  
    if (!userId) {
      return res.status(400).json({ error: "Thi·∫øu user_id" });
    }
  
    const query = "CALL GetBorrowedBooksByUser(?)";
  
    try {
      const [results] = await db.query(query, [userId]);
      res.json([results[0]]); // CALL tr·∫£ m·∫£ng 2 chi·ªÅu
    } catch (err) {
      console.error("L·ªói g·ªçi stored procedure:", err);
      res.status(500).json({ error: 'L·ªói m√°y ch·ªß' });
    }
  });
  
  
  app.post("/borrow", async (req, res) => {
    const userId = req.session.user_id;
    const userType = req.session.userType;
    const { bookId } = req.body;

    if (!userId) {
        return res.status(401).json({ error: "B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ m∆∞·ª£n s√°ch." });
    }

    if (!bookId) {
        return res.status(400).json({ error: "Thi·∫øu m√£ s√°ch." });
    }

    try {
        await db.query("CALL borrow_book(?, ?, ?)", [userId, userType, bookId]);
        res.json({ success: true, message: "M∆∞·ª£n s√°ch th√†nh c√¥ng!" });
    } catch (err) {
        console.error("L·ªói khi m∆∞·ª£n s√°ch:", err);
        res.status(500).json({ error: "Kh√¥ng th·ªÉ m∆∞·ª£n s√°ch." });
    }
});

// L·∫•y danh s√°ch s√°ch ƒë√£ m∆∞·ª£n
app.post('/add-book', upload.none(), async (req, res) => {
    const {
      book, author, book_subject, book_publisher_name,
      image, pub_date, earliest_pub_date, language, isbn,
      permission_level   // ‚úÖ L·∫•y th√™m permission_level t·ª´ form
    } = req.body;
  
    try {
      await db.query('CALL add_book(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [
        book,
        author,
        book_subject,
        book_publisher_name,
        image,
        pub_date,
        earliest_pub_date,
        language,
        isbn,
        permission_level    // ‚úÖ Th√™m v√†o tham s·ªë cu·ªëi c√πng
      ]);
      res.json({ message: 'Th√™m s√°ch th√†nh c√¥ng' });
    } catch (err) {
      console.error(err);
      res.status(500).json({ message: 'Th√™m s√°ch th·∫•t b·∫°i ho·∫∑c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' });
    }
  });
// Tr·∫£ s√°ch
app.patch('/update-return-date/:borrowId', async (req, res) => {
    const borrowId = req.params.borrowId;
    const { Actual_Return_Date } = req.body;
  
    try {
      // Ki·ªÉm tra ƒë·ªãnh d·∫°ng ng√†y tr·∫£ c√≥ h·ª£p l·ªá kh√¥ng (v√≠ d·ª•: dd/mm/yyyy)
      const [month, day, year] = Actual_Return_Date.split('/');
      if (month < 1 || month > 12 || day < 1 || day > 31) {
        return res.status(400).json({ message: 'Ng√†y tr·∫£ kh√¥ng h·ª£p l·ªá' });
      }
  
      // Chuy·ªÉn ƒë·ªïi ng√†y t·ª´ chu·ªói sang ƒë·ªãnh d·∫°ng Date (yyyy-mm-dd)
      const dateObj = new Date(year, month - 1, day);
      const formattedDate = dateObj.toLocaleDateString('en-CA'); // 'yyyy-mm-dd'
  
      // G·ªçi th·ªß t·ª•c ƒë√£ t·∫°o ƒë·ªÉ c·∫≠p nh·∫≠t ng√†y tr·∫£ s√°ch
      await db.query('CALL update_actual_return_date(?, ?)', [borrowId, formattedDate]);
  
      res.json({ message: 'C·∫≠p nh·∫≠t ng√†y tr·∫£ s√°ch th√†nh c√¥ng' });
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'L·ªói khi c·∫≠p nh·∫≠t ng√†y tr·∫£ s√°ch' });
    }
  });

  
// S·ª≠a s√°ch
app.post('/edit-book', async (req, res) => {
    const { book, author, book_subject, book_publisher, image, pub_date, language, earliest_pub_date, ISBN, book_id } = req.body;
  
    try {
      // G·ªçi th·ªß t·ª•c ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin s√°ch
      await db.query('CALL update_book_info(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', [
        book, author, book_subject, book_publisher, image, pub_date, language, earliest_pub_date, ISBN, book_id
      ]);
      res.redirect('/edit-book.html');
    } catch (err) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t s√°ch:', err);
      return res.status(500).send('C·∫≠p nh·∫≠t s√°ch th·∫•t b·∫°i.');
    }
  });

  app.delete('/delete-book/:id', async (req, res) => {
    const bookId = req.params.id;

    try {
        // G·ªçi th·ªß t·ª•c ƒë·ªÉ x√≥a s√°ch
        await db.query('CALL delete_book(?)', [bookId]);
        res.json({ success: true });
    } catch (err) {
        console.error('L·ªói khi x√≥a s√°ch:', err);
        return res.status(500).json({ error: err.message });
    }
});

app.get('/employee_home.html',checkAuth,(req, res) => {
    res.sendFile(path.join(__dirname, 'templates', 'employee_home.html'));
  });
  app.get('/add-book.html',checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'templates', 'add-book.html'));
});

app.get('/edit-book.html',checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'templates', 'edit-book.html'));
});

//// Qu·∫£n l√≠ nh√¢n vi√™n v√† ng∆∞·ªùi d√πng ////
app.get('/management', checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'templates', 'management.html'));
});
// L·∫•y danh s√°ch ng∆∞·ªùi d√πng
app.get("/users", async (req, res) => {
    try {
        const [rows] = await db.query("CALL get_users()");
        res.json(rows[0]); // ch·ªâ tr·∫£ v·ªÅ m·∫£ng d·ªØ li·ªáu ch√≠nh, kh√¥ng nested
    } catch (err) {
        console.error("L·ªói khi l·∫•y users:", err);
        res.status(500).json({ error: "L·ªói server khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng" });
    }
});

// L·∫•y danh s√°ch nh√¢n vi√™n
app.get("/employees", async (req, res) => {
    try {
        const result = await db.query("CALL get_employees()"); // G·ªçi th·ªß t·ª•c get_employees
        res.json(result[0]); // K·∫øt qu·∫£ t·ª´ th·ªß t·ª•c s·∫Ω l√† m·∫£ng d·ªØ li·ªáu
    } catch (err) {
        console.error("L·ªói khi l·∫•y employees:", err);
        res.status(500).json({ error: "L·ªói server khi l·∫•y danh s√°ch nh√¢n vi√™n" });
    }
});
// X√≥a nh√¢n vi√™n v√† ng∆∞·ªùi d√πng
// X√≥a ng∆∞·ªùi d√πng
app.delete("/delete-user/:id", async (req, res) => {
    const { id } = req.params;
    try {
        // G·ªçi th·ªß t·ª•c x√≥a ng∆∞·ªùi d√πng
        await db.query("CALL delete_user(?)", [id]);
        res.sendStatus(200);
    } catch (err) {
        console.error("L·ªói x√≥a user:", err);
        res.status(500).json({ error: "L·ªói khi x√≥a ng∆∞·ªùi d√πng" });
    }
});

// X√≥a nh√¢n vi√™n
app.delete("/delete-employee/:id", async (req, res) => {
    const { id } = req.params;
    try {
        // G·ªçi th·ªß t·ª•c x√≥a nh√¢n vi√™n
        await db.query("CALL delete_employee(?)", [id]);
        res.sendStatus(200);
    } catch (err) {
        console.error("L·ªói x√≥a employee:", err);
        res.status(500).json({ error: "L·ªói khi x√≥a nh√¢n vi√™n" });
    }
});
//// Th√¥ng tin ph·∫°t ////
app.get('/fine-detail/:borrowId', async (req, res) => {
    const { borrowId } = req.params;
    const role = req.session.user?.role || "user"; // fallback n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
  
    try {
      const result = await db.query("CALL GetFineDetail(?)", [borrowId]);
      res.json({ fine: result[0][0], userRole: role });
    } catch (err) {
      console.error(err);
      res.status(500).json({ error: "L·ªói khi l·∫•y th√¥ng tin ph·∫°t." });
    }
  });
app.get('/fine_detail.html',checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, 'templates', 'fine_detail.html'));
});
app.get('/get-fines/:borrowId', checkAuth, async (req, res) => {
    const { borrowId } = req.params; // L·∫•y Borrow_ID t·ª´ URL
    const role = req.session.user?.role || "user";

    // Ki·ªÉm tra borrowId h·ª£p l·ªá
    if (isNaN(borrowId) || borrowId === 'null') {
        return res.status(400).json({ message: 'Borrow_ID kh√¥ng h·ª£p l·ªá.' });
    }

    try {
        // G·ªçi stored procedure ƒë·ªÉ l·∫•y th√¥ng tin phi·∫øu ph·∫°t theo Borrow_ID
        const [fines] = await db.query('CALL GetFineByFineId(?)', [borrowId]);

        res.json({ fines, userRole: role });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'L·ªói khi l·∫•y d·ªØ li·ªáu phi·∫øu ph·∫°t.' });
    }
});
// Update phi·∫øu phat
app.post('/update-fine', checkAuth, upload.none(), async (req, res) => {
    try {
        // Ki·ªÉm tra d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ req.body
        console.log("Received data:", req.body);

        const { Fine_ID, User_ID, Book_ID, Mat_sach, Hu_hong, Fine_amount, Da_thanh_toan, so_ngay_tre_han } = req.body;

        // G·ªçi th·ªß t·ª•c UpdateFine
        const query = `CALL UpdateFine(?, ?, ?, ?, ?, ?, ?)`;
        const [rows, fields] = await db.query(query, [Fine_ID, User_ID, Book_ID, Mat_sach, Hu_hong,Da_thanh_toan, so_ngay_tre_han]);

        console.log("Result from CALL:", rows);

        res.json({ message: 'C·∫≠p nh·∫≠t phi·∫øu ph·∫°t th√†nh c√¥ng' });

    } catch (error) {
        console.error(error);
        res.status(500).json({ message: 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi c·∫≠p nh·∫≠t phi·∫øu ph·∫°t.' });
    }
});
// Gia h·∫°n ng√†y m∆∞·ª£n
app.patch('/extend-loan/:borrowId', async (req, res) => {
    const { borrowId } = req.params;
    let { newReturnDate } = req.body;

    // Chuy·ªÉn ƒë·ªïi ng√†y t·ª´ M/D/YYYY sang YYYY-MM-DD
    const [month, day, year] = newReturnDate.split('/');
    const formattedDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;

    try {
        const [rows] = await db.query('CALL UpdateReturnDate(?, ?)', [borrowId, formattedDate]);

        // Ki·ªÉm tra k·∫øt qu·∫£, n·∫øu th√†nh c√¥ng s·∫Ω c√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ
        res.json({ message: 'ƒê√£ gia h·∫°n s√°ch th√†nh c√¥ng' });
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'C·∫≠p nh·∫≠t th·∫•t b·∫°i' });
    }
});
// L·∫•y s·ªë l·∫ßn gia h·∫°n
app.get('/get-renew/:borrowId', async (req, res) => {
    const borrowId = req.params.borrowId;
    try {
        // G·ªçi stored procedure ƒë·ªÉ l·∫•y th√¥ng tin m∆∞·ª£n s√°ch
        const [rows] = await db.query('CALL GetBorrowById(?)', [borrowId]);

        if (rows.length === 0) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin m∆∞·ª£n s√°ch' });
        }

        // Tr·∫£ v·ªÅ to√†n b·ªô th√¥ng tin c·ªßa b·∫£n ghi (bao g·ªìm t·∫•t c·∫£ c√°c c·ªôt t·ª´ b·∫£ng borrow)
        res.json(rows[0]); // rows[0] ch·ª©a b·∫£n ghi ƒë·∫ßu ti√™n
    } catch (err) {
        console.error(err);
        res.status(500).json({ message: 'L·ªói khi l·∫•y th√¥ng tin m∆∞·ª£n s√°ch' });
    }
});
// Ch·∫°y server
app.listen(PORT, '0.0.0.0', () => {
    console.log(`Server ch·∫°y t·∫°i http://localhost:${PORT}`);
});
// Nh√¢n vi√™n
app.get("/add-employee.html", checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "add-employee.html"));
});
// Ng∆∞·ªùi d√πng
app.get("/add-user.html", checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "add-user.html"));
});
// T√°c gi·∫£
app.get("/add-author.html",checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "add-author.html"));
});
// Nh√† xu·∫•t b·∫£n
app.get("/add-publisher.html", checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "add-publisher.html"));
});
// Th√™m nh√¢n vi√™n 
app.post('/add-employee', upload.none(), checkAuth, async (req, res) => {
    const { fullName, email, password, phone, role } = req.body;
    console.log("Received data:", req.body);

    if (!fullName || !email || !password || !role) {
        return res.status(400).json({ success: false, message: "T·∫•t c·∫£ c√°c tr∆∞·ªùng b·∫Øt bu·ªôc ph·∫£i ƒë∆∞·ª£c ƒëi·ªÅn!" });
    }

    try {
        // L·∫•y Admin_ID t·ª´ session (gi·∫£ s·ª≠ admin ƒëang ƒëƒÉng nh·∫≠p)
        const adminId = req.session.user_id || null; // N·∫øu kh√¥ng c√≥ admin, ƒë·ªÉ NULL

        // Ki·ªÉm tra email c√≥ b·ªã tr√πng kh√¥ng (ƒë√£ c√≥ trong th·ªß t·ª•c, nh∆∞ng c√≥ th·ªÉ ki·ªÉm tra tr∆∞·ªõc ƒë·ªÉ t·ªëi ∆∞u)
        const [emailRows] = await db.query('SELECT * FROM employee WHERE Email = ?', [email]);
        if (emailRows.length > 0) {
            return res.status(400).json({ success: false, message: "Email ƒë√£ t·ªìn t·∫°i!" });
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i c√≥ b·ªã tr√πng kh√¥ng (n·∫øu c·∫ßn)
        if (phone) {
            const [phoneRows] = await db.query('SELECT * FROM employee WHERE Phone_number = ?', [phone]);
            if (phoneRows.length > 0) {
                return res.status(400).json({ success: false, message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!" });
            }
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // Th√™m nh√¢n vi√™n v√†o database
        await db.query('CALL add_employee(?, ?, ?, ?, ?, ?)', [
            adminId,      // Admin_ID t·ª´ session
            fullName,     // Full_Name
            email,        // Email
            phone || null, // Phone_number (cho ph√©p NULL)
            role,         // Role (Employee ho·∫∑c Admin)
            hashedPassword // Password ƒë√£ m√£ h√≥a
        ]);

        res.json({ success: true, message: "Th√™m nh√¢n vi√™n th√†nh c√¥ng!" });
    } catch (err) {
        console.error("L·ªói khi th√™m nh√¢n vi√™n:", err);
        res.status(500).json({ success: false, message: err.sqlMessage || "L·ªói m√°y ch·ªß!" });
    }
});
// Th√™m ng∆∞·ªùi d√πng
app.post('/add-user', upload.none(), checkAuth, async (req, res) => {
    const { userId, fullName, email, password, phone, role } = req.body;
    console.log("Received data:", req.body);

    if (!userId || !fullName || !email || !password || !phone || !role) {
        return res.status(400).json({ success: false, message: "T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu b·∫Øt bu·ªôc!" });
    }

    try {
        // Ki·ªÉm tra User_ID c√≥ b·ªã tr√πng kh√¥ng
        const [userIdRows] = await db.query('SELECT * FROM user WHERE User_ID = ?', [userId]);
        if (userIdRows.length > 0) {
            return res.status(400).json({ success: false, message: "M√£ ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i!" });
        }

        // Ki·ªÉm tra email c√≥ b·ªã tr√πng kh√¥ng
        const [emailRows] = await db.query('SELECT * FROM user WHERE Email = ?', [email]);
        if (emailRows.length > 0) {
            return res.status(400).json({ success: false, message: "Email ƒë√£ t·ªìn t·∫°i!" });
        }

        // Ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i c√≥ b·ªã tr√πng kh√¥ng
        const [phoneRows] = await db.query('SELECT * FROM user WHERE Phone_number = ?', [phone]);
        if (phoneRows.length > 0) {
            return res.status(400).json({ success: false, message: "S·ªë ƒëi·ªán tho·∫°i ƒë√£ t·ªìn t·∫°i!" });
        }

        // √Ånh x·∫° vai tr√≤
        const sinhvien = role === 'sinhvien' ? 1 : 0;
        const giaovien = role === 'giaovien' ? 1 : 0;

        // M√£ h√≥a m·∫≠t kh·∫©u
        const hashedPassword = await bcrypt.hash(password, 10);

        // Th√™m ng∆∞·ªùi d√πng v√†o database
        await db.query('CALL add_user(?, ?, ?, ?, ?, ?, ?)', [
            userId,
            fullName,
            email,
            hashedPassword,
            phone,
            sinhvien,
            giaovien
        ]);
        res.json({ success: true, message: "Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng!" });
    } catch (err) {
        console.error("L·ªói khi th√™m ng∆∞·ªùi d√πng:", err);
        res.status(500).json({ success: false, message: err.sqlMessage || "L·ªói m√°y ch·ªß!" });
    }
});
// Th√™m t√°c gi·∫£
app.post('/add-author', upload.none(), checkAuth, async (req, res) => {
    const { authorId, author, birthDate, deathDate, numberOfBooks, firstPublicationDate, lastPublicationDate, booksInSeries } = req.body;
    console.log("Received data:", req.body);

    if (!authorId || !author) {
        return res.status(400).json({ success: false, message: "M√£ t√°c gi·∫£ v√† t√™n t√°c gi·∫£ l√† b·∫Øt bu·ªôc!" });
    }

    try {
        // Ki·ªÉm tra Author_ID c√≥ b·ªã tr√πng kh√¥ng
        const [authorIdRows] = await db.query('SELECT * FROM all_authors WHERE Author_ID = ?', [authorId]);
        if (authorIdRows.length > 0) {
            return res.status(400).json({ success: false, message: "M√£ t√°c gi·∫£ ƒë√£ t·ªìn t·∫°i!" });
        }

        // Th√™m t√°c gi·∫£ v√†o database
        await db.query('CALL add_author(?, ?, ?, ?, ?, ?, ?, ?)', [
            authorId,
            author,
            birthDate || null,
            deathDate || null,
            numberOfBooks || null,
            firstPublicationDate || null,
            lastPublicationDate || null,
            booksInSeries || null
        ]);

        res.json({ success: true, message: "Th√™m t√°c gi·∫£ th√†nh c√¥ng!" });
    } catch (err) {
        console.error("L·ªói khi th√™m t√°c gi·∫£:", err);
        res.status(500).json({ success: false, message: err.sqlMessage || "L·ªói m√°y ch·ªß!" });
    }
});
app.post('/check-author-id', async (req, res) => {
    const { authorId } = req.body;

    try {
        const [rows] = await db.query('SELECT * FROM all_authors WHERE Author_ID = ?', [authorId]);
        if (rows.length > 0) {
            return res.json({ success: false, message: 'author_id_exists' });
        }
        res.json({ success: true });
    } catch (err) {
        console.error("L·ªói khi ki·ªÉm tra Author_ID:", err);
        res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß!" });
    }
});
// Th√™m nh√† xu·∫•t b·∫£n
app.post('/add-publisher', upload.none(), checkAuth, async (req, res) => {
    const { book_publisher, number_of_books_published, earliest_publication_date, latest_publication_date } = req.body;
    console.log(req.body); 
    if (!book_publisher || !number_of_books_published || !earliest_publication_date || !latest_publication_date) {
        return res.status(400).json({ success: false, message: "T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu b·∫Øt bu·ªôc!" });
    }

    try {
        await db.query('CALL add_publisher(?, ?, ?, ?)', [
            book_publisher,
            number_of_books_published,
            earliest_publication_date,
            latest_publication_date
        ]);

        res.json({ success: true, message: "Th√™m nh√† xu·∫•t b·∫£n th√†nh c√¥ng!" });
    } catch (err) {
        console.error("L·ªói khi th√™m nh√† xu·∫•t b·∫£n:", err);
        res.status(500).json({ success: false, message: err.sqlMessage || "L·ªói m√°y ch·ªß!" });
    }
});
// Th√™m subject
// Hi·ªÉn th·ªã form th√™m m√¥n h·ªçc
app.get("/add-subject.html", checkAuth, (req, res) => {
    res.sendFile(path.join(__dirname, "templates", "add-subject.html"));
});

// Th√™m ch·ªß ƒë·ªÅ
app.post('/add-subject', upload.none(), checkAuth, async (req, res) => {
    const { bookSubject, numberOfAuthors, numberOfBooks } = req.body;
    console.log("Received data:", req.body);

    if (!bookSubject || !numberOfAuthors || !numberOfBooks) {
        return res.status(400).json({ success: false, message: "T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu b·∫Øt bu·ªôc!" });
    }

    try {
        // Th√™m m√¥n h·ªçc v√†o database
        await db.query('CALL add_subject(?, ?, ?)', [
            bookSubject,
            parseInt(numberOfAuthors), // Chuy·ªÉn sang s·ªë nguy√™n
            parseInt(numberOfBooks)    // Chuy·ªÉn sang s·ªë nguy√™n
        ]);

        res.json({ success: true, message: "Th√™m ch·ªß ƒë·ªÅ th√†nh c√¥ng!" });
    } catch (err) {
        console.error("L·ªói khi th√™m ch·ªß ƒë·ªÅ:", err);
        res.status(500).json({ success: false, message: err.sqlMessage || "L·ªói m√°y ch·ªß!" });
    }
});
